// Code generated by MockGen. DO NOT EDIT.
// Source: adapter/broker/interface.go
//
// Generated by this command:
//
//	mockgen -destination=adapter/broker/mock/mock.go -source=adapter/broker/interface.go
//

// Package mock_broker is a generated GoMock package.
package mock_broker

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProducerInterface is a mock of ProducerInterface interface.
type MockProducerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProducerInterfaceMockRecorder
}

// MockProducerInterfaceMockRecorder is the mock recorder for MockProducerInterface.
type MockProducerInterfaceMockRecorder struct {
	mock *MockProducerInterface
}

// NewMockProducerInterface creates a new mock instance.
func NewMockProducerInterface(ctrl *gomock.Controller) *MockProducerInterface {
	mock := &MockProducerInterface{ctrl: ctrl}
	mock.recorder = &MockProducerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerInterface) EXPECT() *MockProducerInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockProducerInterface) Publish(msg any, key []byte, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", msg, key, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockProducerInterfaceMockRecorder) Publish(msg, key, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockProducerInterface)(nil).Publish), msg, key, topic)
}
